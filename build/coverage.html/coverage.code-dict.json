{"/home/travis/build/npmtest/node-npmtest-node-wit/test.js":"/* istanbul instrument in package npmtest_node_wit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-wit/lib.npmtest_node_wit.js":"/* istanbul instrument in package npmtest_node_wit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_wit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_wit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-wit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-wit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_wit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_wit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_wit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_wit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_wit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_wit.__dirname + '/lib.npmtest_node_wit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-wit/node_modules/node-wit/index.js":"'use strict';\n\nmodule.exports = {\n  log: require('./lib/log'),\n  Wit: require('./lib/wit'),\n  interactive: require('./lib/interactive')\n};\n","/home/travis/build/npmtest/node-npmtest-node-wit/node_modules/node-wit/lib/log.js":"'use strict';\n\nvar _funcs;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DEBUG = 'debug';\nvar INFO = 'info';\nvar WARN = 'warn';\nvar ERROR = 'error';\n\nvar levels = [DEBUG, INFO, WARN, ERROR];\nvar funcs = (_funcs = {}, _defineProperty(_funcs, DEBUG, console.error.bind(console, '[wit][debug]')), _defineProperty(_funcs, INFO, console.log.bind(console, '[wit]')), _defineProperty(_funcs, WARN, console.warn.bind(console, '[wit]')), _defineProperty(_funcs, ERROR, console.error.bind(console, '[wit]')), _funcs);\nvar noop = function noop() {};\n\nvar Logger = function Logger(lvl) {\n  var _this = this;\n\n  this.level = lvl || INFO;\n\n  levels.forEach(function (x) {\n    var should = levels.indexOf(x) >= levels.indexOf(lvl);\n    _this[x] = should ? funcs[x] : noop;\n  });\n};\n\nmodule.exports = { Logger: Logger, DEBUG: DEBUG, INFO: INFO, WARN: WARN, ERROR: ERROR };","/home/travis/build/npmtest/node-npmtest-node-wit/node_modules/node-wit/lib/wit.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _require = require('./config'),\n    DEFAULT_API_VERSION = _require.DEFAULT_API_VERSION,\n    DEFAULT_MAX_STEPS = _require.DEFAULT_MAX_STEPS,\n    DEFAULT_WIT_URL = _require.DEFAULT_WIT_URL;\n\nvar fetch = require('isomorphic-fetch');\nvar log = require('./log');\n\nvar learnMore = 'Learn more at https://wit.ai/docs/quickstart';\n\nfunction Wit(opts) {\n  var _this = this;\n\n  if (!(this instanceof Wit)) {\n    return new Wit(opts);\n  }\n\n  var _config = this.config = Object.freeze(validate(opts)),\n      accessToken = _config.accessToken,\n      apiVersion = _config.apiVersion,\n      actions = _config.actions,\n      headers = _config.headers,\n      logger = _config.logger,\n      witURL = _config.witURL;\n\n  this._sessions = {};\n\n  this.message = function (message, context) {\n    var qs = 'q=' + encodeURIComponent(message);\n    if (context) {\n      qs += '&context=' + encodeURIComponent(JSON.stringify(context));\n    }\n    var method = 'GET';\n    var fullURL = witURL + '/message?' + qs;\n    var handler = makeWitResponseHandler(logger, 'message');\n    logger.debug(method, fullURL);\n    return fetch(fullURL, {\n      method: method,\n      headers: headers\n    }).then(function (response) {\n      return Promise.all([response.json(), response.status]);\n    }).then(handler);\n  };\n\n  this.converse = function (sessionId, message, context, reset) {\n    var qs = 'session_id=' + encodeURIComponent(sessionId);\n    if (message) {\n      qs += '&q=' + encodeURIComponent(message);\n    }\n    if (reset) {\n      qs += '&reset=true';\n    }\n    var method = 'POST';\n    var fullURL = witURL + '/converse?' + qs;\n    var handler = makeWitResponseHandler(logger, 'converse');\n    logger.debug(method, fullURL);\n    return fetch(fullURL, {\n      method: method,\n      headers: headers,\n      body: JSON.stringify(context)\n    }).then(function (response) {\n      return Promise.all([response.json(), response.status]);\n    }).then(handler);\n  };\n\n  var continueRunActions = function continueRunActions(sessionId, currentRequest, message, prevContext, i) {\n    return function (json) {\n      if (i < 0) {\n        logger.warn('Max steps reached, stopping.');\n        return prevContext;\n      }\n      if (currentRequest !== _this._sessions[sessionId]) {\n        return prevContext;\n      }\n      if (!json.type) {\n        throw new Error('Couldn\\'t find type in Wit response');\n      }\n\n      logger.debug('Context: ' + JSON.stringify(prevContext));\n      logger.debug('Response type: ' + json.type);\n\n      // backwards-compatibility with API version 20160516\n      if (json.type === 'merge') {\n        json.type = 'action';\n        json.action = 'merge';\n      }\n\n      if (json.type === 'error') {\n        throw new Error('Oops, I don\\'t know what to do.');\n      }\n\n      if (json.type === 'stop') {\n        return prevContext;\n      }\n\n      var request = {\n        sessionId: sessionId,\n        context: clone(prevContext),\n        text: message,\n        entities: json.entities\n      };\n      if (json.type === 'msg') {\n        var response = {\n          text: json.msg,\n          quickreplies: json.quickreplies\n        };\n        return runAction(actions, 'send', request, response).then(function (ctx) {\n          if (ctx) {\n            throw new Error('Cannot update context after \\'send\\' action');\n          }\n          if (currentRequest !== _this._sessions[sessionId]) {\n            return ctx;\n          }\n          return _this.converse(sessionId, null, prevContext).then(continueRunActions(sessionId, currentRequest, message, prevContext, i - 1));\n        });\n      } else if (json.type === 'action') {\n        return runAction(actions, json.action, request).then(function (ctx) {\n          var nextContext = ctx || {};\n          if (currentRequest !== _this._sessions[sessionId]) {\n            return nextContext;\n          }\n          return _this.converse(sessionId, null, nextContext).then(continueRunActions(sessionId, currentRequest, message, nextContext, i - 1));\n        });\n      } else {\n        logger.debug('unknown response type ' + json.type);\n        throw new Error('unknown response type ' + json.type);\n      }\n    };\n  };\n\n  this.runActions = function (sessionId, message, context, maxSteps) {\n    var _this2 = this;\n\n    if (!actions) throwMustHaveActions();\n    var steps = maxSteps ? maxSteps : DEFAULT_MAX_STEPS;\n    // Figuring out whether we need to reset the last turn.\n    // Each new call increments an index for the session.\n    // We only care about the last call to runActions.\n    // All the previous ones are discarded (preemptive exit).\n    var currentRequest = (this._sessions[sessionId] || 0) + 1;\n    this._sessions[sessionId] = currentRequest;\n    var cleanup = function cleanup(ctx) {\n      if (currentRequest === _this2._sessions[sessionId]) {\n        delete _this2._sessions[sessionId];\n      }\n      return ctx;\n    };\n\n    return this.converse(sessionId, message, context, currentRequest > 1).then(continueRunActions(sessionId, currentRequest, message, context, steps)).then(cleanup);\n  };\n};\n\nvar makeWitResponseHandler = function makeWitResponseHandler(logger, endpoint) {\n  return function (rsp) {\n    var error = function error(err) {\n      logger.error('[' + endpoint + '] Error: ' + err);\n      throw err;\n    };\n\n    if (rsp instanceof Error) {\n      return error(rsp);\n    }\n\n    var _rsp = _slicedToArray(rsp, 2),\n        json = _rsp[0],\n        status = _rsp[1];\n\n    if (json instanceof Error) {\n      return error(json);\n    }\n\n    var err = json.error || status !== 200 && json.body + ' (' + status + ')';\n\n    if (err) {\n      return error(err);\n    }\n\n    logger.debug('[' + endpoint + '] Response: ' + JSON.stringify(json));\n    return json;\n  };\n};\n\nvar throwMustHaveActions = function throwMustHaveActions() {\n  throw new Error('You must provide the `actions` parameter to be able to use runActions. ' + learnMore);\n};\n\nvar throwIfActionMissing = function throwIfActionMissing(actions, action) {\n  if (!actions[action]) {\n    throw new Error('No \\'' + action + '\\' action found.');\n  }\n};\n\nvar runAction = function runAction(actions, name) {\n  for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  throwIfActionMissing(actions, name);\n  return Promise.resolve(actions[name].apply(actions, rest));\n};\n\nvar validate = function validate(opts) {\n  if (!opts.accessToken) {\n    throw new Error('Could not find access token, learn more at https://wit.ai/docs');\n  }\n  opts.witURL = opts.witURL || DEFAULT_WIT_URL;\n  opts.apiVersion = opts.apiVersion || DEFAULT_API_VERSION;\n  opts.headers = opts.headers || {\n    'Authorization': 'Bearer ' + opts.accessToken,\n    'Accept': 'application/vnd.wit.' + opts.apiVersion + '+json',\n    'Content-Type': 'application/json'\n  };\n  opts.logger = opts.logger || new log.Logger(log.INFO);\n  if (opts.actions) {\n    opts.actions = validateActions(opts.logger, opts.actions);\n  }\n\n  return opts;\n};\n\nvar validateActions = function validateActions(logger, actions) {\n  if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== 'object') {\n    throw new Error('Actions should be an object. ' + learnMore);\n  }\n  if (!actions.send) {\n    throw new Error('The \\'send\\' action is missing. ' + learnMore);\n  }\n\n  Object.keys(actions).forEach(function (key) {\n    if (typeof actions[key] !== 'function') {\n      logger.warn('The \\'' + key + '\\' action should be a function.');\n    }\n\n    if (key === 'say' && actions[key].length > 2 || key === 'merge' && actions[key].length > 2 || key === 'error' && actions[key].length > 2) {\n      logger.warn('The \\'' + key + '\\' action has been deprecated. ' + learnMore);\n    }\n\n    if (key === 'send') {\n      if (actions[key].length !== 2) {\n        logger.warn('The \\'send\\' action should accept 2 arguments: request and response. ' + learnMore);\n      }\n    } else if (actions[key].length !== 1) {\n      logger.warn('The \\'' + key + '\\' action should accept 1 argument: request. ' + learnMore);\n    }\n  });\n\n  return actions;\n};\n\nvar clone = function clone(obj) {\n  if (obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n    if (Array.isArray(obj)) {\n      return obj.map(clone);\n    } else {\n      var _ret = function () {\n        var newObj = {};\n        Object.keys(obj).forEach(function (k) {\n          newObj[k] = clone(obj[k]);\n        });\n        return {\n          v: newObj\n        };\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n  } else {\n    return obj;\n  }\n};\n\nmodule.exports = Wit;","/home/travis/build/npmtest/node-npmtest-node-wit/node_modules/node-wit/lib/config.js":"'use strict';\n\nmodule.exports = {\n  DEFAULT_API_VERSION: '20160516',\n  DEFAULT_MAX_STEPS: 5,\n  DEFAULT_WIT_URL: 'https://api.wit.ai'\n};","/home/travis/build/npmtest/node-npmtest-node-wit/node_modules/node-wit/lib/interactive.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('./config'),\n    DEFAULT_MAX_STEPS = _require.DEFAULT_MAX_STEPS;\n\nvar logger = require('./log.js');\nvar readline = require('readline');\nvar uuid = require('uuid');\n\nmodule.exports = function (wit, initContext, maxSteps) {\n  var context = (typeof initContext === 'undefined' ? 'undefined' : _typeof(initContext)) === 'object' ? initContext : {};\n  var sessionId = uuid.v1();\n\n  var steps = maxSteps ? maxSteps : DEFAULT_MAX_STEPS;\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.setPrompt('> ');\n  var prompt = function prompt() {\n    rl.prompt();\n    rl.write(null, { ctrl: true, name: 'e' });\n  };\n  prompt();\n  rl.on('line', function (line) {\n    line = line.trim();\n    if (!line) {\n      return prompt();\n    }\n    wit.runActions(sessionId, line, context, steps).then(function (ctx) {\n      context = ctx;\n      prompt();\n    }).catch(function (err) {\n      return console.error(err);\n    });\n  });\n};"}